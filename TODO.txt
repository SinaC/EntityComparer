	var comparer = DiffEngineConfiguration.UsePrecompiledEqualityComparer && keyConfiguration.UsePrecompiledEqualityComparer
                    ? keyConfiguration.PrecompiledEqualityComparer
                    : keyConfiguration.NaiveEqualityComparer;
	compareByPropertyResult = DiffEngineConfiguration.UsePrecompiledEqualityComparer && entityConfiguration.ValuesConfiguration.UsePrecompiledEqualityComparer
                            ? entityConfiguration.ValuesConfiguration.PrecompiledEqualityComparer.Compare(existingEntity, newEntity)
                            : entityConfiguration.ValuesConfiguration.NaiveEqualityComparer.Compare(existingEntity, newEntity);
	could be replaced with a table by entity initializing comparer depending on UsePrecompiledEqualityComparer options
	same goes for var generateOperations = DiffEngineConfiguration.GenerateOperations && (entityConfiguration.UpdateConfiguration == null || entityConfiguration.UpdateConfiguration.GenerateOperations);

Optimize GenerateInsertDiffOperation, GenerateDeleteDiffOperation, everything related to generateOperations
	 GenerateKeysForOperation and GenerateKeysForException: keys have already been calculated previously in the diff process ??? -> No

try // loop
try to remove recursivity

HasKey is optional if related entity only appear in HasOne and MergeSingle

more tests
	complex scenario (see aFRR Activation Control)